
# Template d'un Makefile, par Valentin GUILLON
# Complet (avec un DIST) et avec des explications

# Vous avez des exemples de compilation à la fin du fichier (après "clean:")

# Tous les fichiers présents dans les dossiers $(SRC) et $(INCLUDE) seront automatiquement inclus dans le zip, lors du "make dist" (donc pas besoin de les mentionner dans FILESFORDIST=)

# Pour chaque programme à compiler, il faudra ajouter le nom de l'exécutable que l'on veut obtenir, dans PROGS=, ainsi qu'écrire une cible du même nom
# Exemple: on veux compiler exo.c
#	PROGS = ... exo
#	all: $(PROGS)
#	exo:
#   	gcc exo.c -o exo

# Notations particulières:
#   $@ fait référence à la cible
#   $^ fait référence AUX dépendanceS
# Exemple:
# program: lib1.o lib2.o
#   gcc $@.c $^ -o $@
#   #équivaut à:
#   gcc program.c lib1.o lib2.o -o program
    

# ===============================================
# ============== DÉBUT DU MAKEFILE ==============
# ===============================================



COURS = nom_du_cours
DEVOIR = TPx
PROGRAMMER = NOM-Prenom-nEtudiant

SRC = src/#dossier dans lequel on met les fichiers sources (.c/cpp sans main)
INCLUDE = include/#dossier dans lequel on met les headers (.h/hpp)

DISTNAME = $(COURS)_$(DEVOIR)_$(PROGRAMMER)#nom du dossier pour la création de l'archive
FILESFORDIST = makefile *$(EXT)#liste des fichiers à mettre dans le zip

CC = gcc#ou g++
EXT = .c#ou .cpp
EXTLIB = .h #ou .hpp
CFLAGS = -Wall -Wextra#-g pour avoir les numéro de ligne lors du bebug avec gdb

PROGS = test#exo1 exo2 ...#liste des exécutables/cibles. Faire en sorte que chaque exé ai sa cible dans le makefile



all: clean $(PROGS)


# cible: dependances
# 	commandes


# Exemples de compilation à la fin du fichier (après "clean:")


test: fonctions.o
	$(CC) $(CFLAGS) $@$(EXT) $^ -I$(INCLUDE) -o $@
fonctions.o:
	$(CC) $(CFLAGS) -c $(SRC)fonctions$(EXT) -I$(INCLUDE) -o $@



distdir:
# on recréé un dossier
# on y met les copies des fichiers à mettre dans le zip
# on vérifie que les dossiers $(SRC) et $(INCLUDE) existe, avant de copier les fichiers qu'ils contiennent
	rm -rf $(DISTNAME) #on supprime le dossier $(DISTNAME)
	mkdir $(DISTNAME)
	cp $(FILESFORDIST) $(DISTNAME)
	if [ -d $(SRC) ]; then cp -r $(SRC) $(DISTNAME); fi #si le dossier $(SRC) existe, alors on le copie dans $(DISTNAME)
	if [ -d $(INCLUDE) ]; then cp -r $(INCLUDE) $(DISTNAME); fi #si le dossier $(INCLUDE) existe, alors on le copie dans $(DISTNAME)

dist: clean distdir
# on zip le dossier qu'on a rempli dans la cible distdir
# on supprime le dossier
	zip -r $(COURS)_$(DEVOIR)_$(PROGRAMMER).zip $(DISTNAME)
	rm -rf $(DISTNAME)


clean:
# suppression des tous les .o
# suppression des tous les executables (mentionnés dans PROGS=)
	find . -name "*.o" -delete
	rm -f $(PROGS)



# ===============================================
# =============== FIN DU MAKEFILE ===============
# ===============================================




#exemples de compilation:


# processus pour compiler un seul fichier .c
# (ex: exo.c)
# PROGS = ... exo

# exo:
# 	$(CC) $(CFLAGS) $@$(EXT) -o $@



# processus pour compiler avec un fichier source et un header
# (ex: exo.c, src/fonctions.c et include/fonctions.h)
# PROGS = ... exo

# exo: fonctions.o
# #on compile exo.c en y incluant $(SRC)fonctions.o
# #-I<nom_chemin>, indique dans quel dossier chercher des .h/hpp en priorité
# 	$(CC) $(CFLAGS) $@$(EXT) $^ -I$(INCLUDE) -o $@

# fonctions.o:
# #génération de l'objet fonctions.o de src/fonctions.c
# 	$(CC) $(CFLAGS) -c $(SRC)fonctions$(EXT) -I$(INCLUDE) -o $@
